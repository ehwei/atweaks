["calc"] = {
    desc = "A simple command line calculator",
    vers = 0.22,
    alias = "=",
    state = off,
    -- defaultCommand = "",
    -- autorun = false,
    code = {
        "msg = string.lower(msg)",
        "if not(tonumber(static.answer)) then static.answer = 0 end",
        "msg = msg:gsub(\"ans\", tostring(static.answer))",
        "local proc = loadstring(\"return \"..msg)",
        "static.answer = proc()",
        "print(\"calc: \" .. msg .. \" = \" .. static.answer)",
    }
},

["in"] = {
    desc = "will run a slash command in a set amount of time \"/in ## /whatever\" or \"/in #:## /whatever\" (not all slash commands can be delayed)",
    vers = 3.5,
    state = on,
    -- defaultCommand = "",
    -- autorun = false,
    code = {
        "local delay, what = string.split(\" \", msg, 2)",
        "if string.find( delay, \":\" ) then",
        "    local mins, secs = string.split(\":\", delay)",
        "    mins = tonumber(mins)",
        "    secs = tonumber(secs)",
        "    delay = (mins * 60) + secs",
        "else",
        "    delay = tonumber(delay)",
        "end",
        "if delay <= 0 then",
        "    print(\"/in delay must be greater than 0\")",
        "    return",
        "end",
        "BillsUtils.Wait( delay, DoIt, what )",
    },
},

["matchmount"] = {
    desc = "attempts to match the mount of your target",
    state = true,
    vers = 1.2,
    alias = "mm",
    -- defaultCommand = "matchmount",
    -- autorun = false,
    code = {
        "print(\"MatchMount:\")",
        "if InCombatLockdown() then",
        "    print(\"You cannot summon a mount this way while in combat\")",
        "    return",
        "elseif not UnitExists(\"target\") then",
        "    print(\"You must target another player to match their mount.\")",
        "    return",
        "end",
        "local _, mountID, spellID, buffName",
        "for x = 1, 40 do",
        "    buffName, _, _, _, _, _, _, _, _, spellID = UnitBuff(\"target\", x)",
        "    if not(buffName) then break end",
        "    mountID = spellID and C_MountJournal.GetMountFromSpell(spellID) or nil",
        "    if mountID then break end",
        "end",
        "if not(mountID) then",
        "    print(\"    Your target does not appear to be mounted\")",
        "    return",
        "end",
        "local creatureName, _, _, _, isUsable, _, _, _, _, _, isCollected, _ = C_MountJournal.GetMountInfoByID(mountID)",
        "if isUsable and isCollected then",
        "    C_MountJournal.SummonByID(mountID)",
        "    print(\"    Summoning \\\"\".. creatureName .. \"\\\"\" )",
        "elseif not(isCollected) then",
        "    print(\"    You have not collected \" .. creatureName .. \" so it cannot be summoned\")",
        "else",
        "    print(\"    I can't find a usable match for your target's mount\")",
        "end",
    },
},

["xx"] = {
    desc = "attempts to dismount you and leave any vehicle you are in including taxis",
    vers = 2.01,
    state = on,
    -- defaultCommand = "",
    -- autorun = false,
    code = {
        "if UnitInVehicle(\"player\") then",
        "     VehicleExit()",
        "end",
        "if IsMounted() then",
        "     Dismount()",
        "end",
        "if UnitOnTaxi(\"player\") then",
        "     TaxiRequestEarlyLanding()",
        "end",
    },
},
